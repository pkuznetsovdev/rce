{"version":3,"file":"static/js/760.2a13332c.chunk.js","mappings":"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","sources":["components/docs-content-header/docs-content-header.tsx","components/collapsible/collapsible.tsx","components/docs-html/docs-html.tsx","components/docs-tag/docs-tag.tsx","components/docs-modifiers/docs-modifiers.tsx","components/docs-content/docs-content.tsx","components/docs-config/docs-config.tsx","pages/docs/template.tsx","components/docs-css/docs-css.tsx","pages/docs/index.tsx"],"sourcesContent":["import React from 'react';\nimport CE from 'react-content-elements';\nimport type { ContentElementConfigProps } from 'react-content-elements';\n\nexport interface DailyCardProps extends React.PropsWithChildren {\n  itemIndex?: number;\n  image?: ContentElementConfigProps<'image'>;\n  title?: ContentElementConfigProps<'text'>;\n}\n\nexport const DocsContentHeader = ({ image, title }: DailyCardProps) => {\n  return (\n    <CE.Block className='docs-content-header'>\n      <CE.Text>\n        Content Elements serve as the foundation for representing basic HTML structures. The development process with\n        Content Elements is formalized to efficiently generate these basic structures and manage associated styles.\n        <br />A basic structure refers to any HTML or CSS code generated through Content Elements.\n      </CE.Text>\n    </CE.Block>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\n\ntype CollapsibleProps = {\n  btnText?: string;\n  btnTextCollapsed?: string;\n  isCollapsedByDefault?: boolean;\n  title?: string;\n};\n\nexport const Collapsible = ({\n  btnText = 'hide',\n  btnTextCollapsed = 'show',\n  children,\n  isCollapsedByDefault = false,\n  title,\n}: React.PropsWithChildren<CollapsibleProps>) => {\n  const [isCollapsed, setIsCollapsed] = React.useState(() => isCollapsedByDefault);\n\n  const triggerText = btnTextCollapsed && !isCollapsed ? btnText : btnTextCollapsed;\n\n  return (\n    <CE.Block className='collapsible'>\n      <CE.Block modifiers={['row', 'collapsible-header']}>\n        {title && <CE.Text tag='span'>{title}</CE.Text>}\n        <CE.Button\n          content={triggerText}\n          onClick={() => setIsCollapsed((prevState) => !prevState)}\n          modifiers={['collapsible-trigger', 'b']}\n        />\n      </CE.Block>\n      <CE.Block modifiers={['collapsible-content', isCollapsed && 'collapsed']}>{children}</CE.Block>\n    </CE.Block>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\nimport { CodeExample } from '../../modules';\nimport { CODE_EXAMPLES } from '../../constants';\nimport { useValueFromList } from 'src/shared';\nimport { DocsTag } from '../docs-tag';\nimport { DocsModifiers } from '../docs-modifiers';\nimport { DocsContent } from '../docs-content';\nimport { DocsConfig } from '../docs-config';\nimport { Collapsible } from '../collapsible';\n\nconst CE_PROPERTIES = ['Tag', 'Modifiers', 'Content', 'Config'] as const;\n\nconst TemplateByTab: Record<(typeof CE_PROPERTIES)[number], React.ElementType> = {\n  Tag: DocsTag,\n  Modifiers: DocsModifiers,\n  Content: DocsContent,\n  Config: DocsConfig,\n};\n\nconst joinSpecWords = (words: string[] | ReadonlyArray<string>) =>\n  words.map((w, i) => (\n    <>\n      {/* @ts-ignore*/}\n      <c-spec key={w}>{w}</c-spec>\n      {i === words.length - 1 ? '.' : ', '}\n    </>\n  ));\n\nexport const DocsHtml = () => {\n  const [activeTabId, setActiveTabId] = useValueFromList(CE_PROPERTIES);\n\n  const ActiveTabTemplate = React.useMemo(() => TemplateByTab[activeTabId], [activeTabId]);\n\n  const roles = (\n    <>\n      All <mark>Content Elements</mark> are grouped by its role in the page:&nbsp;\n      {joinSpecWords(Object.keys(CE))}\n    </>\n  );\n  const props = (\n    <>\n      All <mark>Content Elements</mark> have 4 special properties:&nbsp;\n      {joinSpecWords(CE_PROPERTIES)}\n    </>\n  );\n\n  return (\n    <CE.Block className='docs-html'>\n      <CE.Text>{roles}</CE.Text>\n      <CE.Text>{props}</CE.Text>\n      <CE.Text modifiers={['list-title']}>\n        All <mark>Content Elements</mark> have a base classname:\n      </CE.Text>\n      <CE.List modifiers={['disc']}>\n        <>\n          <i>ce ce-[name]</i>\n          <br />\n          f.e. ‘ce ce-text’ for <mark>Text Content Element</mark>\n        </>\n      </CE.List>\n      <Collapsible btnText='Hide basic usage examples' btnTextCollapsed='Show basic usage examples'>\n        <CodeExample ex={CODE_EXAMPLES.BASIC_USAGE} />\n      </Collapsible>\n      <CE.Text modifiers={['title']}>\n        <mark>Content Elements</mark>&nbsp;properties\n      </CE.Text>\n      <CE.List\n        modifiers={['row', 'docs-tabs']}\n        // @ts-ignore\n        ItemTemplate={({ tab }: { tab: (typeof CE_PROPERTIES)[number] }) => {\n          return (\n            <CE.Button\n              type='button'\n              modifiers={['docs-tab', activeTabId === tab && 'active', 'docs-tab-properties']}\n              onClick={() => setActiveTabId(tab)}\n            >\n              {tab}\n            </CE.Button>\n          );\n        }}\n        content={CE_PROPERTIES.map((tab) => ({ tab }))}\n      />\n      <CE.Divider />\n      <ActiveTabTemplate />\n    </CE.Block>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\nimport { CodeExample } from '../../modules';\nimport { CODE_EXAMPLES } from '../../constants';\n\nexport const DocsTag = () => {\n  return (\n    <>\n      <CE.Text modifiers={['title']}>Tag</CE.Text>\n      <CE.Text>\n        Each Content Element in the system is assigned a default HTML tag based on its name. This default tag represents\n        the recommended HTML tag for the respective Content Element.\n      </CE.Text>\n      <CE.Text>\n        However, if you explicitly provide a tag via the inline property when using a Content Element, that specified\n        tag will take precedence over the default tag. This means that the provided tag will be used as the HTML tag for\n        the element, overriding the default tag assignment.\n      </CE.Text>\n      <CE.Text>\n        By allowing the flexibility to specify a tag inline, developers have the ability to customize and fine-tune the\n        HTML structure generated by Content Elements. This approach provides greater control and adaptability when it\n        comes to integrating the Content Elements into specific contexts or accommodating specific requirements.\n      </CE.Text>\n      <CE.Text>\n        In summary, each Content Element has a default tag assigned based on its name, but you can override this default\n        by providing an inline tag property, which will be given top priority in determining the HTML tag used for the\n        element.\n      </CE.Text>\n      <CodeExample ex={CODE_EXAMPLES.TAG_USAGE} />\n    </>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\nimport { CodeExample } from '../../modules';\nimport { CODE_EXAMPLES } from '../../constants';\n\nexport const DocsModifiers = () => {\n  return (\n    <>\n      <CE.Text modifiers={['title']}>Modifiers</CE.Text>\n      <CE.Text>\n        In the context of Content Elements, modifiers are used to adjust the styles or behavior of the generated HTML\n        structure. A modifier is a string that represents a meaningful label for a specific element within the HTML\n        structure.\n      </CE.Text>\n      <CE.Text>\n        Modifiers extend the base class name of the Content Element and might override the default tag assigned to a\n        Content Element.\n      </CE.Text>\n      <CE.Text>\n        Modifiers provide a convenient way to extend and modify styles and behavior of Content Elements.\n      </CE.Text>\n      <CodeExample ex={CODE_EXAMPLES.MODIFIERS_USAGE} />\n      <CE.Text modifiers={['list-title']}>\n        Modifiers in Content Elements offer powerful feature to control styles based on screen sizes using breakpoints.\n      </CE.Text>\n      <CE.List modifiers={['disc']}>\n        <>\n          <CE.Text>Above and Beyond</CE.Text>\n          <CE.Text>\n            <code>above-[$ce-breakpoint]</code> - styles are applied for screen size {'≥'}{' '}\n            <code>$ce-breakpoint-value</code>\n          </CE.Text>\n          <CE.Text>\n            <code>beyond-[$ce-breakpoint]</code> - styles are applied for screen size {'<'}{' '}\n            <code>$ce-breakpoint-value</code>\n          </CE.Text>\n          <CodeExample ex={CODE_EXAMPLES.MODIFIERS_FEATURES_USAGE.aboveAndBeyond} />\n        </>\n      </CE.List>\n    </>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\nimport { CodeExample } from '../../modules';\nimport { CODE_EXAMPLES } from '../../constants';\n\nexport const DocsContent = () => {\n  return (\n    <>\n      <CE.Text modifiers={['title']}>Content</CE.Text>\n      <CE.Text>\n        In Content Elements, the content of an element can be any valid HTML markup. This content is passed to the\n        element using the dangerouslySetInnerHTML property, which allows you to directly set the inner HTML of the\n        element.\n      </CE.Text>\n      <CodeExample ex={CODE_EXAMPLES.CONTENT_USAGE} />\n    </>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\nimport { CodeExample } from '../../modules';\nimport { CODE_EXAMPLES } from '../../constants';\n\nexport const DocsConfig = () => {\n  return (\n    <>\n      <CE.Text modifiers={['title']}>Config</CE.Text>\n      <CE.Text>\n        In Content Elements, the config property allows you to adjust all properties of an element.\n        <br />\n        By providing a configuration object, you can customize various properties of the element, and these\n        configurations take precedence over other default or inline properties.\n      </CE.Text>\n      <CodeExample ex={CODE_EXAMPLES.CONFIG_USAGE} />\n    </>\n  );\n};\n","import React from 'react';\nimport CE from 'react-content-elements';\n\nimport { Layout } from '../../layout';\n\nimport { DocsContentHeader } from 'src/components/docs-content-header';\nimport { DocsHtml } from 'src/components/docs-html';\nimport { DocsCss } from 'src/components/docs-css';\nimport { useValueFromList } from 'src/shared';\n\nconst mainClass = 'docs';\n\nconst TABS = ['HTML', 'CSS'] as const;\n\nconst TemplateByTab = {\n  HTML: DocsHtml,\n  CSS: DocsCss,\n} as const;\n\nconst Template = () => {\n  const [activeTabId, setActiveTabId] = useValueFromList(TABS);\n\n  const ActiveTabTemplate = React.useMemo(() => TemplateByTab[activeTabId], [activeTabId]);\n\n  return (\n    <>\n      <Layout className={mainClass} title='How'>\n        <CE.Block modifiers={['container', 'docs-content']}>\n          <DocsContentHeader />\n          <CE.List\n            modifiers={['row', 'docs-tabs']}\n            // @ts-ignore\n            ItemTemplate={({ tab }: { tab: (typeof TABS)[number] }) => {\n              return (\n                <CE.Button\n                  modifiers={['docs-tab', activeTabId === tab && 'active']}\n                  onClick={() => setActiveTabId(tab)}\n                >\n                  {tab}\n                </CE.Button>\n              );\n            }}\n            content={TABS.map((tab) => ({ tab }))}\n          />\n          <CE.Divider />\n          <ActiveTabTemplate />\n        </CE.Block>\n      </Layout>\n    </>\n  );\n};\n\nexport default Template;\n","import React from 'react';\nimport CE from 'react-content-elements';\nimport { ContentElementConfigProps } from 'react-content-elements';\nimport { CodeBlock, CodeExample } from '../../modules';\nimport { CODE_EXAMPLES } from '../../constants';\nimport { Collapsible } from '../collapsible';\n\nexport interface DailyCardProps extends React.PropsWithChildren {\n  itemIndex?: number;\n  image?: ContentElementConfigProps<'image'>;\n  title?: ContentElementConfigProps<'text'>;\n}\n\nexport const DocsCss = ({ image, title }: DailyCardProps) => {\n  return (\n    <CE.Block className='docs-css'>\n      <CE.Text>The base class name for Content Elements is structured as follows:</CE.Text>\n      <CE.Text modifiers={['with-disc']}>\n        <b>ce ce-[name]</b>\n      </CE.Text>\n      <CE.Text>\n        The <b>ce</b> prefix stands for \"Content Element,\" and <b>[name]</b> represents the specific name or type of the\n        Content Element.\n      </CE.Text>\n      <CE.Text>Modifiers extend the base Content Element class name using the following pattern:</CE.Text>\n      <CE.Text modifiers={['with-disc', 'bold']}>ce ce-[name] ce--[modifier] ce--[another-modifier]</CE.Text>\n      <CE.Text>\n        Each modifier is denoted by the <b>ce--</b> prefix followed by the specific modifier name.\n        <br />\n        Multiple modifiers are applied by separating them with spaces.\n      </CE.Text>\n      <CE.Text>Styles for Content Elements are applied using mixins.</CE.Text>\n\n      <Collapsible title='@byName'>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.BY_NAME}</CodeBlock>\n      </Collapsible>\n\n      <Collapsible title='@byModifier'>\n        <CE.Text>\n          The styles generated by the following mixin include selectors for screen sizes defined by every breakpoint.\n          <br />\n          The values of the breakpoints can be locally overridden in your project. To do so, you can include a file that\n          reassigns the values of the breakpoints before using the mixin. By reassigning the values, you can customize\n          the breakpoints to align with your specific project requirements.\n          <br />\n          Make sure that the file with the reassigned breakpoint values is included before the actual usage of the\n          mixin.\n        </CE.Text>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.BY_MODIFIER}</CodeBlock>\n      </Collapsible>\n\n      <Collapsible title='@withModifier'>\n        <CE.Text>\n          The styles generated by the following mixin include selectors for screen sizes defined by every breakpoint.\n        </CE.Text>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.WITH_MODIFIER}</CodeBlock>\n      </Collapsible>\n\n      <Collapsible title='@nextByName'>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.NEXT_BY_NAME}</CodeBlock>\n      </Collapsible>\n\n      <Collapsible title='@nextByModifier'>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.NEXT_BY_MODIFIER}</CodeBlock>\n      </Collapsible>\n\n      <Collapsible title='@childByName'>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.CHILD_BY_NAME}</CodeBlock>\n      </Collapsible>\n\n      <Collapsible title='@childByModifier'>\n        <CodeBlock language='scss'>{CODE_EXAMPLES.MODIFIERS.CHILD_BY_MODIFIER}</CodeBlock>\n      </Collapsible>\n    </CE.Block>\n  );\n};\n","import './styles.scss';\nimport { default as Index } from './template';\n\nexport default Index;\n"],"names":["DocsContentHeader","image","title","className","Collapsible","btnText","btnTextCollapsed","children","isCollapsedByDefault","React","isCollapsed","setIsCollapsed","triggerText","modifiers","tag","content","onClick","prevState","CE_PROPERTIES","TemplateByTab","Tag","ex","CODE_EXAMPLES","Modifiers","Content","Config","joinSpecWords","words","map","w","i","length","TABS","HTML","useValueFromList","activeTabId","setActiveTabId","ActiveTabTemplate","roles","Object","keys","CE","props","ItemTemplate","tab","type","CSS","language"],"sourceRoot":""}