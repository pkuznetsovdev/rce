{"version":3,"file":"static/js/957.314024f6.chunk.js","mappings":"6HAAA,ICMA,EAJqB,CACnBA,UDHF,CACIC,OAAQ,CACJC,WAAY,yBACZC,UAAW,CAAC,gBAEhBC,UAAW,iCACXC,WAAY,CACR,CACIC,MAAO,+BACPC,KAAM,CACFL,WACI,2KAGRM,QAAS,IAEb,CACIF,MAAO,+BACPG,MAAO,CACH,qFACA,iGACA,gEACA,2CAEJD,aAASE,GAEb,CACIJ,MAAO,cACPG,MAAO,CACH,8EACA,6DACA,uCACA,gDAEJD,aAASE,GAEb,CACIJ,MAAO,8BACPG,MAAO,CACH,+CAKJD,aAASE,IAGjBC,QAAS,CACL,CACIC,MAAO,CACHC,IAAK,uKACLC,OAAQ,CACJC,GAAI,yKAKZT,MAAO,CACHJ,WAAY,aAEhBc,YAAa,yBAEjB,CACIJ,MAAO,uKACPN,MAAO,YACPU,YAAa,yBAEjB,CACIJ,MAAO,uKACPN,MAAO,YACPU,YAAa,4BEnElB,SAASC,EACdC,GAIA,OAAOC,EAAaD,EACtB,C,4JCEaE,EAAS,SAAH,GAKC,IAAD,IAJjBjB,UAAAA,OAAS,MAAG,GAAE,EACdkB,EAAQ,EAARA,SACAf,EAAK,EAALA,MACGgB,GAAK,YAER,OACE,UAAC,EAAAC,GAAA,OAAQ,kBAAKD,GAAK,IAAEnB,UAAS,CAAG,QAAM,eAAKA,IAAW,WACrD,UAAC,EAAAoB,GAAA,MAAQ,CAACpB,UAAW,CAAC,aAAa,WACjC,SAAC,KAAM,KACP,SAAC,EAAAoB,GAAA,KAAO,CAACpB,UAAW,CAAC,cAAeqB,OAAQlB,QAE9C,SAAC,EAAAiB,GAAA,MAAQ,CAACE,IAAI,OAAOtB,UAAW,CAAC,QAAQ,SACtCkB,OAIT,C,iHClBaK,EAAc,SAAH,GAAwC,IAAlCL,EAAQ,EAARA,SAC5B,OACE,SAAC,EAAAE,GAAA,MAAQ,CAACI,UAAU,eAAc,UAChC,0BACE,0BAAON,OAIf,ECfA,GCWgB,EAAAE,GAAA,KAIA,EAAAA,GAAA,KAIA,EAAAA,GAAA,KAIA,EAAAA,GAAA,KAIA,EAAAA,GAAA,KAKC,YACEN,EAAAA,EAAAA,GAAW,aAE5B,OACE,+BACE,SAAC,IAAM,CAACU,UAhCI,OAgCkBrB,MAAM,OAAM,UACxC,SAAC,EAAAiB,GAAA,MAAQ,CAACpB,UAAW,CAAC,aAAa,UACjC,UAAC,EAAAoB,GAAA,MAAQ,CAACpB,UAAW,CAAC,WAAW,WAC/B,UAAC,EAAAoB,GAAA,KAAO,WAAC,8CAEP,kBAAM,eACN,kBAAM,SACN,kBAAM,eAER,SAAC,EAAAA,GAAA,KAAO,UAAC,eACT,SAAC,EAAAA,GAAA,KAAO,UAAC,2GAIT,SAAC,EAAAA,GAAA,KAAO,UAAC,SACT,SAAC,EAAAA,GAAA,KAAO,UAAC,kGAIT,SAAC,EAAAA,GAAA,KAAO,UAAC,YACT,SAAC,EAAAA,GAAA,KAAO,UAAC,qFAIT,SAAC,EAAAA,GAAA,KAAO,UAAC,sBACT,SAAC,EAAAA,GAAA,KAAO,UAAC,UACT,UAAC,EAAAA,GAAA,KAAO,WAAC,8DAEP,mBACA,SAACG,EAAW,uDACZ,SAAC,EAAAH,GAAA,KAAO,UAAC,aACT,SAAC,EAAAA,GAAA,KAAO,UAAC,0BACT,mBACA,SAACG,EAAW,yDACZ,SAAC,EAAAH,GAAA,KAAO,UAAC,aACT,SAAC,EAAAA,GAAA,KAAO,CAACC,OAAO,0BAChB,mBACA,SAACE,EAAW,uDACZ,SAAC,EAAAH,GAAA,KAAO,UAAC,aACT,SAAC,EAAAA,GAAA,KAAO,CAAChB,KAAK,oCAO5B,E","sources":["custom/project-a/data/data-by-page/index-page.ts","custom/project-a/data/data-by-page/index.ts","custom/project-a/data/useGetData.ts","custom/project-a/layout/default/default.tsx","custom/project-a/components/code-snippet/template.tsx","custom/project-a/pages/docs/index.tsx","custom/project-a/pages/docs/template.tsx"],"sourcesContent":["export default {\n    header: {\n        rawContent: \"React Content Elements\",\n        modifiers: [\"main-header\"],\n    },\n    subHeader: \"Your first Web Content Factory\",\n    textBlocks: [\n        {\n            title: 'Web Content Development(WCD)',\n            text: {\n                rawContent:\n                    '<b>Web Content Development</b> is appliance of your  <i>content data</i> to the digital page' +\n                    '</br>It stands for CRUD operations with the <i>content data</i> of the page',\n            },\n            caption: ''\n        },\n        {\n            title: 'How did you solve it before?',\n            items: [\n                'Use UX lib or develop basic structures internally to get basic reusable structures',\n                'Apply UI lib or develop style system internally to describe the outlook of the code structures',\n                'Maintain the code structures and style system on a daily base',\n                'Refactor it due to changed requirements'\n            ],\n            caption: undefined\n        },\n        {\n            title: 'Why bother?',\n            items: [\n                'Custom approach for basic structures architecture by company/team/developer',\n                'Custom approach for style system by company/team/developer',\n                'Duplicating same patterns by project',\n                'Endless refactoring to meet new requirements',\n            ],\n            caption: undefined\n        },\n        {\n            title: 'Why React Content Elements?',\n            items: [\n                'Formalized HTML and CSS development pattern',\n                // 'Predefined and reusable basic HTML structures for content elements',\n                // 'Single and simple CSS styles structure',\n                // 'Scalable with custom solutions both in HTML and CSS structures',\n            ],\n            caption: undefined\n        },\n    ],\n    options: [\n        {\n            image: {\n                src: \"https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea057.jpg\",\n                srcSet: {\n                    xs: \"https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea058.jpg\",\n                }\n            },\n            // title: \"Option #1\",\n            // TODO FAQ: How to make it work?\n            title: {\n                rawContent: \"Option #1\",\n            },\n            description: \"Description of option\"\n        },\n        {\n            image: \"https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea057.jpg\",\n            title: \"Option #2\",\n            description: \"Description of option\"\n        },\n        {\n            image: \"https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea057.jpg\",\n            title: \"Option #3\",\n            description: \"Description of option\"\n        },\n    ]\n} as const;","import IndexPageData from './index-page';\n\nconst DATA_BY_PAGE = {\n  IndexPage: IndexPageData,\n}\n\nexport default DATA_BY_PAGE;","import DATA_BY_PAGE from \"./data-by-page\";\nimport { PathToData, DataByPath } from \"./types\";\n\nexport function useGetData<Path extends PathToData>(\n  pathToData: Path\n): DataByPath<Path> {\n  // TODO: FIX TS\n  // @ts-ignore\n  return DATA_BY_PAGE[pathToData];\n}\n","import React from \"react\";\nimport { CE } from \"src/ce\";\nimport { MyElementConfig, MyElementProps } from \"src/ce/core/types\";\nimport { Header } from \"../../components\";\n\ninterface LayoutProps\n  extends React.PropsWithChildren<Pick<MyElementProps<\"text\">, \"modifiers\">> {\n  className?: string;\n  title?: MyElementConfig<\"text\">;\n}\n\nexport const Layout = ({\n  modifiers = [],\n  children,\n  title,\n  ...props\n}: LayoutProps) => {\n  return (\n    <CE.Block {...props} modifiers={[\"page\", ...modifiers]}>\n      <CE.Block modifiers={[\"container\"]}>\n        <Header />\n        <CE.Text modifiers={[\"page-title\"]} config={title} />\n      </CE.Block>\n      <CE.Block tag=\"main\" modifiers={[\"main\"]}>\n        {children}\n      </CE.Block>\n    </CE.Block>\n  );\n};\n","import React from \"react\";\nimport { CE } from \"src/ce\";\nimport { MyElementConfigProps } from \"src/ce/core/types\";\n\nexport interface CodeSnippetProps extends React.PropsWithChildren {\n  itemIndex?: number;\n  image?: MyElementConfigProps<\"image\">;\n  title?: MyElementConfigProps<\"text\">;\n}\n\nexport const CodeSnippet = ({ children }: CodeSnippetProps) => {\n  return (\n    <CE.Block className=\"code-snippet\">\n      <pre>\n        <code>{children}</code>\n      </pre>\n    </CE.Block>\n  );\n};\n","import \"./styles.scss\";\nimport { default as Index } from \"./template\";\n\nexport default Index;\n","import React from \"react\";\nimport { CE } from \"src/ce\";\n\nimport { Layout } from \"../../layout\";\n\nimport { useGetData } from \"src/custom/project-a/data\";\nimport { CodeSnippet } from \"../../components/code-snippet\";\n\nconst mainClass = \"docs\";\n\nconst DOCS_DATA = {\n  elements: [\n    {\n      title: \"Text\",\n      element: <CE.Text>Text</CE.Text>,\n    },\n    {\n      title: \"Image\",\n      element: <CE.Text>Image</CE.Text>,\n    },\n    {\n      title: \"Block\",\n      element: <CE.Text>Block</CE.Text>,\n    },\n    {\n      title: \"List\",\n      element: <CE.Text>List</CE.Text>,\n    },\n    {\n      title: \"Link\",\n      element: <CE.Text>Link</CE.Text>,\n    },\n  ],\n};\n\nconst Template = () => {\n  const pageData = useGetData(\"IndexPage\");\n\n  return (\n    <>\n      <Layout className={mainClass} title=\"Docs\">\n        <CE.Block modifiers={[\"container\"]}>\n          <CE.Block modifiers={[\"content\"]}>\n            <CE.Text>\n              Content Elemements have 3 main properties:\n              <br />- modifiers\n              <br />- tag\n              <br />- config\n            </CE.Text>\n            <CE.Text>Modifiers</CE.Text>\n            <CE.Text>\n              By modifiers you adjust styles or behavoiur of the Content\n              Element. Modifiers is an array of strings.\n            </CE.Text>\n            <CE.Text>Tag</CE.Text>\n            <CE.Text>\n              The value of the property represents tag name that will be used\n              for the HTML element in DOM.\n            </CE.Text>\n            <CE.Text>Config</CE.Text>\n            <CE.Text>\n              By config you provide content data and adjust bahaviour of the\n              Content Element.\n            </CE.Text>\n            <CE.Text>Content elements</CE.Text>\n            <CE.Text>Text</CE.Text>\n            <CE.Text>\n              The `text` Content Element represents a text node in HTML.\n              <hr />\n              <CodeSnippet>{`<CE.Text>Text Content Element</CE.Text>`}</CodeSnippet>\n              <CE.Text>Result:</CE.Text>\n              <CE.Text>Text Content Element</CE.Text>\n              <hr />\n              <CodeSnippet>{`<CE.Text config=\"Text Content Element\" />`}</CodeSnippet>\n              <CE.Text>Result:</CE.Text>\n              <CE.Text config=\"Text Content Element\" />\n              <hr />\n              <CodeSnippet>{`<CE.Text text=\"Text Content Element\" />`}</CodeSnippet>\n              <CE.Text>Result:</CE.Text>\n              <CE.Text text=\"Text Content Element\" />\n            </CE.Text>\n          </CE.Block>\n        </CE.Block>\n      </Layout>\n    </>\n  );\n};\n\nexport default Template;\n"],"names":["IndexPage","header","rawContent","modifiers","subHeader","textBlocks","title","text","caption","items","undefined","options","image","src","srcSet","xs","description","useGetData","pathToData","DATA_BY_PAGE","Layout","children","props","CE","config","tag","CodeSnippet","className"],"sourceRoot":""}