{"version":3,"file":"static/js/619.a98b9c58.chunk.js","mappings":"+HAAA,ICMA,EAJqB,CACnBA,UDHF,CACEC,OAAQ,CACNC,WAAY,yBACZC,UAAW,CAAC,gBAEdC,UAAW,iCACXC,WAAY,CACV,CACEC,MAAO,+BACPC,KAAM,CACJL,WACE,2KAGJM,QAAS,IAEX,CACEF,MAAO,+BACPG,MAAO,CACL,qFACA,iGACA,gEACA,2CAEFD,aAASE,GAEX,CACEJ,MAAO,cACPG,MAAO,CACL,8EACA,6DACA,uCACA,gDAEFD,aAASE,GAEX,CACEJ,MAAO,8BACPG,MAAO,CACL,+CAKFD,aAASE,IAGbC,QAAS,CACP,CACEC,MAAO,CACLC,IAAK,uKACLC,OAAQ,CACNC,GAAI,yKAKRT,MAAO,CACLJ,WAAY,aAEdc,YAAa,yBAEf,CACEJ,MACE,uKACFN,MAAO,YACPU,YAAa,yBAEf,CACEJ,MACE,uKACFN,MAAO,YACPU,YAAa,4BErEZ,SAASC,EAAoCC,GAGlD,OAAOC,EAAaD,EACtB,C,kKCGaE,EAAS,SAAH,GAAoE,IAAD,IAA7DjB,UAAAA,OAAS,MAAG,GAAE,EAAEkB,EAAQ,EAARA,SAAUf,EAAK,EAALA,MAAUgB,GAAK,YAChE,OACE,UAAC,EAAAC,GAAA,OAAQ,kBAAKD,GAAK,IAAEnB,UAAS,CAAG,QAAM,eAAKA,IAAW,WACrD,UAAC,EAAAoB,GAAA,MAAQ,CAACpB,UAAW,CAAC,aAAa,WACjC,SAAC,KAAM,KACP,SAAC,EAAAoB,GAAA,KAAO,CAACpB,UAAW,CAAC,cAAeqB,OAAQlB,QAE9C,SAAC,EAAAiB,GAAA,MAAQ,CAACE,IAAI,OAAOtB,UAAW,CAAC,QAAQ,SACtCkB,OAIT,C,sHCnBA,ECMiB,YACEJ,EAAAA,EAAAA,GAAW,aAE5B,OACE,+BACE,SAAC,IAAM,CAACS,UAPI,UAOkBpB,MAAM,0BAAyB,UAC3D,SAAC,EAAAiB,GAAA,MAAQ,CAACpB,UAAW,CAAC,UAAW,aAAa,UAC5C,UAAC,EAAAoB,GAAA,MAAQ,CAACpB,UAAW,CAAC,WAAW,WAC/B,UAAC,EAAAoB,GAAA,KAAO,WAAC,wKAGP,kBAAM,6BACmB,0BAAM,4BAA8B,QAE/D,UAAC,EAAAA,GAAA,KAAO,WAAC,uEAEP,kBAAM,WACC,0BAAM,iBAAmB,oBAAgB,0BAAM,kBAAoB,QAAI,0BAAM,kBAAoB,0FAClB,KACtF,0BAAM,kBAAoB,WAAO,0BAAM,kBAAoB,wBAC3D,kBAAM,iHAGN,kBAAM,2CAGR,SAAC,EAAAA,GAAA,KAAO,UAAC,6BACT,UAAC,EAAAA,GAAA,KAAO,WAAC,sBACW,0BAAM,oBAAsB,iEAE9C,kBAAM,iHAGN,mBACA,uBAAG,kCAEL,SAAC,EAAAA,GAAA,KAAO,UAAC,0JAIT,UAAC,EAAAA,GAAA,KAAO,WAAC,+HAGP,kBAAM,sIASpB,C","sources":["custom/project-a/data/data-by-page/index-page.ts","custom/project-a/data/data-by-page/index.ts","custom/project-a/data/useGetData.ts","custom/project-a/layout/default/default.tsx","custom/project-a/pages/concept/index.tsx","custom/project-a/pages/concept/template.tsx"],"sourcesContent":["export default {\n  header: {\n    rawContent: 'React Content Elements',\n    modifiers: ['main-header'],\n  },\n  subHeader: 'Your first Web Content Factory',\n  textBlocks: [\n    {\n      title: 'Web Content Development(WCD)',\n      text: {\n        rawContent:\n          '<b>Web Content Development</b> is appliance of your  <i>content data</i> to the digital page' +\n          '</br>It stands for CRUD operations with the <i>content data</i> of the page',\n      },\n      caption: '',\n    },\n    {\n      title: 'How did you solve it before?',\n      items: [\n        'Use UX lib or develop basic structures internally to get basic reusable structures',\n        'Apply UI lib or develop style system internally to describe the outlook of the code structures',\n        'Maintain the code structures and style system on a daily base',\n        'Refactor it due to changed requirements',\n      ],\n      caption: undefined,\n    },\n    {\n      title: 'Why bother?',\n      items: [\n        'Custom approach for basic structures architecture by company/team/developer',\n        'Custom approach for style system by company/team/developer',\n        'Duplicating same patterns by project',\n        'Endless refactoring to meet new requirements',\n      ],\n      caption: undefined,\n    },\n    {\n      title: 'Why React Content Elements?',\n      items: [\n        'Formalized HTML and CSS development pattern',\n        // 'Predefined and reusable basic HTML structures for content elements',\n        // 'Single and simple CSS styles structure',\n        // 'Scalable with custom solutions both in HTML and CSS structures',\n      ],\n      caption: undefined,\n    },\n  ],\n  options: [\n    {\n      image: {\n        src: 'https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea057.jpg',\n        srcSet: {\n          xs: 'https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea058.jpg',\n        },\n      },\n      // title: \"Option #1\",\n      // TODO FAQ: How to make it work?\n      title: {\n        rawContent: 'Option #1',\n      },\n      description: 'Description of option',\n    },\n    {\n      image:\n        'https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea057.jpg',\n      title: 'Option #2',\n      description: 'Description of option',\n    },\n    {\n      image:\n        'https://www.investopedia.com/thmb/9wQ2rMbSd2QX2qniP7JRHZTBBvc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/option-597b2316d56041998fc9e48583fea057.jpg',\n      title: 'Option #3',\n      description: 'Description of option',\n    },\n  ],\n} as const;\n","import IndexPageData from './index-page';\n\nconst DATA_BY_PAGE = {\n  IndexPage: IndexPageData,\n};\n\nexport default DATA_BY_PAGE;\n","import DATA_BY_PAGE from './data-by-page';\nimport { PathToData, DataByPath } from './types';\n\nexport function useGetData<Path extends PathToData>(pathToData: Path): DataByPath<Path> {\n  // TODO: FIX TS\n  // @ts-ignore\n  return DATA_BY_PAGE[pathToData];\n}\n","import React from 'react';\nimport Test, { CE } from 'react-content-elements';\nimport { ContentElementConfig, ContentElementProps } from 'react-content-elements';\nimport { Header } from '../../components';\n\ninterface LayoutProps extends React.PropsWithChildren<Pick<ContentElementProps<'text'>, 'modifiers'>> {\n  className?: string;\n  title?: ContentElementConfig<'text'>;\n}\n\nexport const Layout = ({ modifiers = [], children, title, ...props }: LayoutProps) => {\n  return (\n    <CE.Block {...props} modifiers={['page', ...modifiers]}>\n      <CE.Block modifiers={['container']}>\n        <Header />\n        <CE.Text modifiers={['page-title']} config={title} />\n      </CE.Block>\n      <CE.Block tag='main' modifiers={['main']}>\n        {children}\n      </CE.Block>\n    </CE.Block>\n  );\n};\n","import './styles.scss';\nimport { default as Index } from './template';\n\nexport default Index;\n","import React from 'react';\nimport { CE } from 'react-content-elements';\n\nimport { Layout } from '../../layout';\n\nimport { useGetData } from 'src/custom/project-a/data';\n\nconst mainClass = 'concept';\n\nconst Template = () => {\n  const pageData = useGetData('IndexPage');\n\n  return (\n    <>\n      <Layout className={mainClass} title='Web Content Development'>\n        <CE.Block modifiers={['section', 'container']}>\n          <CE.Block modifiers={['concept']}>\n            <CE.Text>\n              The content data of digital pages is constantly updating. That might be correct for most of business\n              projects. It includes CRUD operations to the loads of datasets.\n              <br />\n              We use CMS to handle the <mark>content data management</mark>.\n            </CE.Text>\n            <CE.Text>\n              From the developers perspective that's an abstract factory pattern.\n              <br />\n              Two of <mark>content data</mark> properties are <mark>content type </mark>and <mark>content data </mark>.\n              We want to generate different HTML structures and styles systems depending on the the{' '}\n              <mark>content type </mark>and/or <mark>content data </mark>of each data entity.\n              <br />\n              We pick a framework, create reusable components, design a style system, then scale and maintain the\n              codebase.\n              <br />\n              We pick trusted and known solutions.\n            </CE.Text>\n            <CE.Text>So what is the problem?</CE.Text>\n            <CE.Text>\n              We build the same <mark>HTML structures</mark> on our daily basis. Just like first print publishing\n              houses.\n              <br />\n              We do it manually with every element. Create wrappers or reuse from the 3rd party lib. Style and extend\n              them.\n              <br />\n              <i>We provide the solutions.</i>\n            </CE.Text>\n            <CE.Text>\n              Every developer provides a custom solution for the particular content data element. This solution is based\n              on general requirements by every project.\n            </CE.Text>\n            <CE.Text>\n              Web Content Elements is a formalized way to create low level HTML structures and manage style system of\n              the entire project.\n              <br />\n              It's flexible enough to generate anything that is possible with HTML and provide styles in consistent and\n              linear manner.\n            </CE.Text>\n          </CE.Block>\n        </CE.Block>\n      </Layout>\n    </>\n  );\n};\n\nexport default Template;\n"],"names":["IndexPage","header","rawContent","modifiers","subHeader","textBlocks","title","text","caption","items","undefined","options","image","src","srcSet","xs","description","useGetData","pathToData","DATA_BY_PAGE","Layout","children","props","CE","config","tag","className"],"sourceRoot":""}