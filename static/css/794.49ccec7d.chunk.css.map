{"version":3,"file":"static/css/794.49ccec7d.chunk.css","mappings":"AAwCE,mBCjCE,cDEI,wBADF,4BCDF,eDUI,4BADF,6BCTF,eDEI,wBADF,4BCDF,eDUI,4BADF,6BCTF,eDEI,wBADF,4BCDF,eDUI,4BADF,6BCTF,eDEI,yBADF,4BCDF,eDUI,6BADF,6BCTF,eDEI,yBADF,4BCDF,eDUI,6BADF,6BCTF,eDEI,yBADF,6BCDF,eDUI,6BADF,8BCTF","sources":["../node_modules/react-content-elements/dist/styles/utils/shared/mixins/modifiers.scss","custom/project-a/pages/sandbox/styles.scss"],"sourcesContent":["@use '../breakpoints' as *;\n@use '../content-elements' as *;\n\n@mixin withAboveAndBeyond {\n  @content;\n\n  @each $breakpoint-name, $breakpoint-value in $breakpoints {\n    &-above {\n      &-#{$breakpoint-name} {\n        @media (min-width: $breakpoint-value) {\n          @content;\n        }\n      }\n    }\n\n    &-beyond {\n      &-#{$breakpoint-name} {\n        @media (max-width: calc($breakpoint-value - 0.001px)) {\n          @content;\n        }\n      }\n    }\n  }\n}\n\n@mixin useModifier($modifier: string) {\n  @include withAboveAndBeyond {\n    @content;\n  }\n}\n\n@mixin withModifier($modifier: string) {\n  &#{$ce-base-name}--#{$modifier} {\n    @include useModifier($modifier) {\n      @content;\n    }\n  }\n}\n\n@mixin byModifier($modifier: string) {\n  #{$ce-base-name}--#{$modifier} {\n    @include useModifier($modifier) {\n      @content;\n    }\n  }\n}\n\n// TODO FAQ: How to make it work? Do we need it?\n// - create a root level css variable with selector\n// - provide content for the new selector by new css property\n//  We can define new custom names and generate content by using it's as a selector within 1 mixin\n//@mixin byName($ce-name: string) {\n//  :root {\n//    --#{$ce-base-name}-#{$ce-name}: '.#{$ce-base-name}-#{$ce-name}'\n//  }\n//\n//  #{var(--#{$ce-base-name}-#{$ce-name})} {\n//    @content\n//  }\n//}\n\n// .ce--accent {\n//   color: var(--ce-accent-color);\n// }\n// @media (min-width: 576px) {\n//   .ce--accent-above-xs {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (max-width: calc($breakpoint-value - 1px)) {\n//   .ce--accent-beyond-xs {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (min-width: 768px) {\n//   .ce--accent-above-sm {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (max-width: calc($breakpoint-value - 1px)) {\n//   .ce--accent-beyond-sm {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (min-width: 960px) {\n//   .ce--accent-above-md {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (max-width: calc($breakpoint-value - 1px)) {\n//   .ce--accent-beyond-md {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (min-width: 1248px) {\n//   .ce--accent-above-lg {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (max-width: calc($breakpoint-value - 1px)) {\n//   .ce--accent-beyond-lg {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (min-width: 1632px) {\n//   .ce--accent-above-xl {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (max-width: calc($breakpoint-value - 1px)) {\n//   .ce--accent-beyond-xl {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (min-width: 1920px) {\n//   .ce--accent-above-xxl {\n//     color: var(--ce-accent-color);\n//   }\n// }\n// @media (max-width: calc($breakpoint-value - 1px)) {\n//   .ce--accent-beyond-xxl {\n//     color: var(--ce-accent-color);\n//   }\n// }","@import \"react-content-elements/dist/styles/utils/shared\";\n\n\n$name: 'sandbox';\n\n.#{$name} {\n  @include byModifier('main') {\n    display: block;\n  }\n}"],"names":[],"sourceRoot":""}